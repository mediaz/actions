# Copyright MediaZ Teknoloji A.S. All Rights Reserved.

name: Release Modules

on:
  workflow_call:
    inputs:
      ref_name:
        required: true
        type: string
      build_all:
        description: 'Build all modules'
        required: false
        default: false
        type: boolean
      nodos_sdk_version:
        description: 'Nodos SDK Version'
        required: false
        default: ''
        type: string
      clean:
        description: 'Clean build'
        required: false
        default: false
        type: boolean
      build_number:
        description: 'Build number'
        required: false
        default: '0'
        type: string

env:
  GH_USERNAME: "nodos-bot"
  GIT_EMAIL: "bot@nodos.dev"
  GH_TOKEN: ${{ secrets.CI_TOKEN }}
  DIST_TARGET_DIR: "D:/Builds/Nodos-Modules"
  SYSTEM_NOSMAN_PATH: "C:/Tools/nosman.exe"
  RUST_BACKTRACE: 1
  NOSMAN_EXECUTABLE_NAME: "nodos.exe"

jobs:
  build:
    name: Build & Publish (${{ inputs.ref_name }} - ${{ inputs.build_number }})
    runs-on: self-hosted
    steps:
      - name: Update Git Credentials
        continue-on-error: true
        shell: bash
        run: |
          git credential-manager github login --username ${{ env.GH_USERNAME }} --token ${{ env.GH_TOKEN }} --force

      - name: Clean Build
        shell: pwsh
        if: ${{ inputs.clean }}
        run: |
          if (Test-Path -Path ./modules-${{ inputs.ref_name }}) { Remove-Item -Path ./modules-${{ inputs.ref_name }} -Recurse -Force }

      - name: Setup Work Folder
        shell: pwsh
        run: |
          if (-not (Test-Path -Path ./modules-${{ inputs.ref_name }})) { New-Item -Path ./modules-${{ inputs.ref_name }} -ItemType Directory -Force }

      - name: Setup Nodos Workspace (Latest)
        if: ${{ inputs.nodos_sdk_version == '' }}
        run: |
          if (-not (Test-Path -Path ./workspace)) {
            ${{ env.SYSTEM_NOSMAN_PATH }} --workspace ./workspace get
          } else {
            cd ./workspace
            ./${{ env.NOSMAN_EXECUTABLE_NAME }} update
            cd ..
          }
          echo "Updating system nosman"
          Copy-Item -Path ./workspace/${{ env.NOSMAN_EXECUTABLE_NAME }} -Destination ${{ env.SYSTEM_NOSMAN_PATH }} -Force
        shell: pwsh
        working-directory: modules-${{ inputs.ref_name }}

      - name: Setup Nodos Workspace (Specific Version)
        if: ${{ inputs.nodos_sdk_version != '' }}
        run: |
          ${{ env.SYSTEM_NOSMAN_PATH }} --workspace ./workspace get --version "${{ inputs.nodos_sdk_version }}"
        shell: pwsh
        working-directory: modules-${{ inputs.ref_name }}

      - name: Checkout
        shell: pwsh
        run: |
          if (-not (Test-Path -Path ./modules-repo)) {
            git clone --branch ${{ inputs.ref_name }} --depth 1 https://github.com/${{ github.repository }}.git --recurse-submodule --shallow-submodules ./modules-repo
          }
          cd ./modules-repo
          git fetch origin
          git checkout ${{ inputs.ref_name }}
          git clean -ffd
          git restore .
          git pull --force
          git submodule update --force --recursive --init
          git fetch --tags
          git status
        working-directory: modules-${{ inputs.ref_name }}/workspace/Module

      - name: Setup Git
        run: |
          git config user.email "${{ env.GIT_EMAIL }}"
          git config user.name "${{ env.GH_USERNAME }}"
        working-directory: modules-${{ inputs.ref_name }}/workspace/Module/modules-repo
  
      - name: Update Nosman Cache
        shell: pwsh
        run: |
          ./${{ env.NOSMAN_EXECUTABLE_NAME }} rescan --fetch-index
        working-directory: modules-${{ inputs.ref_name }}/workspace

      - name: Configure
        shell: pwsh
        run: |
          cmake -S ./Toolchain/CMake -B ../Project -DCMAKE_BUILD_TYPE=Release
        working-directory: modules-${{ inputs.ref_name }}/workspace

      - name: Build
        shell: pwsh
        run: |
          cmake --build ../Project --config Release -j 8
        working-directory: modules-${{ inputs.ref_name }}/workspace

      - name: Release (Changed)
        if: ${{ inputs.build_all == null || inputs.build_all == false }}
        shell: pwsh
        run: |
          $LastBuildTag = git for-each-ref --sort=-v:refname --format='%(refname:short)' 'refs/tags/build.${{ inputs.ref_name }}-*' | Select-Object -First 1
          echo "Last build tag is $LastBuildTag"
          ../../${{ env.NOSMAN_EXECUTABLE_NAME }} --workspace ../../ publish-batch --repo-path . --compare-with="$LastBuildTag" --vendor Nodos --version-suffix ".b${{ inputs.build_number }}" --verbose --publisher-name "${{ env.GH_USERNAME }}" --publisher-email "${{ env.GIT_EMAIL }}" --tag "${{ inputs.ref_name }}"
        working-directory: modules-${{ inputs.ref_name }}/workspace/Module/modules-repo
      
      - name: Release (All)
        if: ${{ inputs.build_all }}
        shell: pwsh
        run: |
          ../../${{ env.NOSMAN_EXECUTABLE_NAME }} --workspace ../../ publish-batch --repo-path . --vendor=Nodos --version-suffix ".b${{ inputs.build_number }}" --verbose --publisher-name "${{ env.GH_USERNAME }}" --publisher-email "${{ env.GIT_EMAIL }}" --tag "${{ inputs.ref_name }}"
        working-directory: modules-${{ inputs.ref_name }}/workspace/Module/modules-repo
      
      - name: Tag
        run: |
          git tag -a "build.${{ inputs.ref_name }}-${{ inputs.build_number }}" -m "Build ${{ inputs.ref_name }}-${{ inputs.build_number }}"
          git push origin "build.${{ inputs.ref_name }}-${{ inputs.build_number }}"
        working-directory: modules-${{ inputs.ref_name }}/workspace/Module/modules-repo
