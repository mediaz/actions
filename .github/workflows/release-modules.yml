# Copyright MediaZ Teknoloji A.S. All Rights Reserved.

name: Release Modules

on:
  workflow_call:
    inputs:
      ref_name:
        required: true
        type: string
      release_all:
        description: 'Force release all modules'
        required: false
        default: false
        type: boolean
      nodos_sdk_version:
        description: 'Nodos SDK Version'
        required: false
        default: ''
        type: string
      clean:
        description: 'Clean build'
        required: false
        default: false
        type: boolean
      build_number:
        description: 'Build number'
        required: false
        default: '0'
        type: string
      sign_binaries:
        description: 'Sign binaries'
        required: false
        default: false
        type: boolean
      release_notes:
        description: 'Release notes'
        required: false
        default: ''
        type: string

jobs:
  build:
    strategy:
      matrix:
        runner: [[self-hosted, Windows, "${{ inputs.ref_name }}"], [self-hosted, Linux, "${{ inputs.ref_name }}"]]
      fail-fast: false
    name: "${{ inputs.ref_name }} - ${{ inputs.build_number }} (${{ matrix.runner[1] }})"
    runs-on: ${{ matrix.runner }}

    env:
      GH_USERNAME: "nodos-bot"
      GIT_EMAIL: "bot@nodos.dev"
      GH_TOKEN: ${{ secrets.CI_TOKEN }}
      RUST_BACKTRACE: 1

    steps:
      - name: Setup Environment Variables
        run: |
          if [ "${{ matrix.runner[1] }}" == "Linux" ]; then
            echo "SYSTEM_NOSMAN_PATH=~/Tools/nodos/nodos" >> $GITHUB_ENV
            echo "NOSMAN_EXECUTABLE_NAME=nodos" >> $GITHUB_ENV
            echo "TAG_NAME_PREFIX=build.${{ inputs.ref_name }}-linux" >> $GITHUB_ENV
          else
            echo "SYSTEM_NOSMAN_PATH=C:/Tools/nodos.exe" >> $GITHUB_ENV
            echo "NOSMAN_EXECUTABLE_NAME=nodos.exe" >> $GITHUB_ENV
            echo "TAG_NAME_PREFIX=build.${{ inputs.ref_name }}-windows" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Update Git Credentials
        continue-on-error: true
        shell: bash
        run: |
          git credential-manager github login --username ${{ env.GH_USERNAME }} --token ${{ secrets.CI_TOKEN }} --force


      - name: Clean Build
        shell: pwsh
        if: ${{ inputs.clean }}
        run: |
          if (Test-Path -Path ./modules-${{ inputs.ref_name }}) { Remove-Item -Path ./modules-${{ inputs.ref_name }} -Recurse -Force }

      - name: Setup Work Folder
        shell: pwsh
        run: |
          if (-not (Test-Path -Path ./modules-${{ inputs.ref_name }})) { New-Item -Path ./modules-${{ inputs.ref_name }} -ItemType Directory -Force }

      - name: Setup Nodos Workspace (Latest)
        if: ${{ inputs.nodos_sdk_version == '' }}
        run: |
          if (-not (Test-Path -Path ./workspace)) {
            ${{ env.SYSTEM_NOSMAN_PATH }} --workspace ./workspace get
          } else {
            cd ./workspace
            ./${{ env.NOSMAN_EXECUTABLE_NAME }} update
            cd ..
          }
        shell: pwsh
        working-directory: modules-${{ inputs.ref_name }}

      - name: Setup Nodos Workspace (Specific Version)
        if: ${{ inputs.nodos_sdk_version != '' }}
        run: |
          ${{ env.SYSTEM_NOSMAN_PATH }} --workspace ./workspace get --version "${{ inputs.nodos_sdk_version }}"
        shell: pwsh
        working-directory: modules-${{ inputs.ref_name }}

      - name: Checkout
        shell: pwsh
        run: |
          if (-not (Test-Path -Path ./modules-repo)) {
            git clone --branch ${{ inputs.ref_name }} --depth 1 https://github.com/${{ github.repository }}.git --recurse-submodule --shallow-submodules ./modules-repo
          }
          cd ./modules-repo
          git fetch origin
          git checkout ${{ inputs.ref_name }}
          git clean -ffd
          git restore .
          git pull --force
          git fetch --tags
          git checkout ${{ github.sha }}
          git submodule update --force --recursive --init
          git status
        working-directory: modules-${{ inputs.ref_name }}/workspace/Module

      - name: Setup Git
        run: |
          git config user.email "${{ env.GIT_EMAIL }}"
          git config user.name "${{ env.GH_USERNAME }}"
        working-directory: modules-${{ inputs.ref_name }}/workspace/Module/modules-repo
  
      - name: Update Nosman Cache
        shell: pwsh
        run: |
          ./${{ env.NOSMAN_EXECUTABLE_NAME }} rescan --fetch-index
        working-directory: modules-${{ inputs.ref_name }}/workspace

      - name: Configure
        shell: pwsh
        run: |
          cmake -S ./Toolchain/CMake -B ../Project -DCMAKE_BUILD_TYPE=Release
        working-directory: modules-${{ inputs.ref_name }}/workspace

      - name: Build
        shell: pwsh
        run: |
          cmake --build ../Project --config Release -j 8
        working-directory: modules-${{ inputs.ref_name }}/workspace

      - name: Sign Binaries
        if: ${{ inputs.sign_binaries && matrix.runner[1] == 'Windows' && inputs.ref_name != 'dev' }}
        run: |            
          cd /d "%MEDIAZ_CERTIFICATES_DIR%"
          python sign_module.py ${{ github.workspace }}/modules-${{ inputs.ref_name }}/workspace/Module/modules-repo
        shell: bash

      - name: Publish (Changed)
        if: ${{ inputs.release_all == null || inputs.release_all == 'false' }}
        shell: bash
        run: |
          if [ "${{ matrix.runner[1] }}" == "Windows" ]; then
            if [ "${{ github.event.inputs.sign_binaries }}" == "true" ]; then
              RELEASE_NOTES="${{ github.event.inputs.release_notes }}
              Executable binaries are signed!"
            else
              RELEASE_NOTES="${{ github.event.inputs.release_notes }}
              Executable binaries are not signed!"
            fi
          else
            RELEASE_NOTES="${{ github.event.inputs.release_notes }}"
          fi

          LastBuildTag=$(git for-each-ref --sort=-v:refname --format='%(refname:short)' "refs/tags/${TAG_NAME_PREFIX}-*" | head -n 1)
          echo "Last build tag is $LastBuildTag"

          ../../${{ env.NOSMAN_EXECUTABLE_NAME }} \
            --workspace ../../ \
            publish-batch \
            --repo-path . \
            --compare-with="$LastBuildTag" \
            --vendor Nodos \
            --version-suffix ".b${{ inputs.build_number }}" \
            --verbose \
            --publisher-name "${{ env.GH_USERNAME }}" \
            --publisher-email "${{ env.GIT_EMAIL }}" \
            --tag "${{ inputs.ref_name }}" \
            --release-notes "$RELEASE_NOTES"
        working-directory: modules-${{ inputs.ref_name }}/workspace/Module/modules-repo

      - name: Publish (All)
        if: ${{ inputs.release_all }}
        shell: bash
        run: |
          if [ "${{ matrix.runner[1] }}" == "Windows" ]; then
            if [ "${{ github.event.inputs.sign_binaries }}" == "true" ]; then
              RELEASE_NOTES="${{ github.event.inputs.release_notes }}
              Executable binaries are signed!"
            else
              RELEASE_NOTES="${{ github.event.inputs.release_notes }}
              Executable binaries are not signed!"
            fi
          else
            RELEASE_NOTES="${{ github.event.inputs.release_notes }}"
          fi

          ../../${{ env.NOSMAN_EXECUTABLE_NAME }} --workspace ../../ publish-batch --repo-path . --vendor=Nodos --version-suffix ".b${{ inputs.build_number }}" --verbose --publisher-name "${{ env.GH_USERNAME }}" --publisher-email "${{ env.GIT_EMAIL }}" --tag "${{ inputs.ref_name }}" --release-notes "$RELEASE_NOTES"
        working-directory: modules-${{ inputs.ref_name }}/workspace/Module/modules-repo
      
      - name: Tag
        run: |
          git tag -a "${{ env.TAG_NAME_PREFIX }}-${{ inputs.build_number }}" -m "Build ${{ inputs.ref_name }}-${{ inputs.build_number }}"
          git push origin "${{ env.TAG_NAME_PREFIX }}-${{ inputs.build_number }}"
        working-directory: modules-${{ inputs.ref_name }}/workspace/Module/modules-repo
